@model Bearchop.Areas.LOTW.Web.ViewModels.PicksViewModel

@using(Html.BeginForm("save", "pick", FormMethod.Post, new { @id = "savePickForm" + Model.PickWeek.Number.ToString() } ))
{
    @Html.Hidden("week", Model.PickWeek.Number)

        <table class="table table-condensed">
            <thead>
                <tr>
                    <th style="width:20px;"></th>
                    <th>Game</th>
                    <th>Spread</th>
                    <th>O/U</th>
                    <th>Pick</th>
                    <th>Pick Type</th>
                    <th>O/U Pick</th>
                    <th>Points</th>
                </tr>
            </thead>
            <tbody>
        
                @if (Model.ViewingPicksForCurrentUser && Model.GamesHaveStarted == false)
                {
                    int rowId = -1;
                    foreach (var game in Model.Games)
                    {
                        rowId++;
                        var pick = Model.PickForGame(game);
                
                        <tr id="@game.Id">
                                                    <td>
                            <input type="hidden" name="[@(rowId)].Id" value="@Html.Raw(pick == null ? string.Empty : pick.Id.ToString())" /> 
                            <input type="hidden" name="[@(rowId)].UserId" value="@Model.CurrentUser.Id" />
                            <input type="hidden" name="[@(rowId)].Week" value="@Model.PickWeek.Number" />
                            <input type="hidden" name="[@(rowId)].WeekId" value="@Model.PickWeek.Id" />
                            <input type="hidden" name="[@(rowId)].GameId" value="@game.Id" />

                            @Html.CheckBox("gameSelected" + game.Id, Model.PickForGame(game) != null, new {@class="selectedCheckbox", alt=rowId})

                            @*<input type="checkbox" data-index="@rowId" class="selectedCheckbox" name="gameSelected@(game.Id)" @Html.Raw((Model.PickForGame(game) == null) ? string.Empty : "checked") />*@
                        </td>
                            <td>
                                @if(game.HomeTeam == game.Favorite)
                                {
                                    @Html.Raw(game.AwayTeam + " @ <strong class='bold'>" + game.HomeTeam + "</strong>");
                                }
                                else
                                {
                                    @Html.Raw("<strong>" + game.AwayTeam + "</strong> @ " + game.HomeTeam);
                                }
                            
                            </td>
                            <td>@game.Spread</td>
                            <td>@game.OverUnder</td>
                                                <td>                            
                            <select id="teamPick@(game.Id)" class="teamPick" name="[@(rowId)].Team" data-rowid="@rowId">
                                <option @Html.Raw((pick == null || pick.Team == game.Favorite) ? "selected='selected'" : string.Empty)>@game.Favorite</option>
                                <option @Html.Raw((pick != null && pick.Team != game.Favorite) ? "selected='selected'" : string.Empty)>@Html.Raw(game.Favorite == game.HomeTeam ? game.AwayTeam : game.HomeTeam)</option>
                            </select>
                        </td>
                        <td>
                            <select id="typePick@(game.Id)" name="[@(rowId)].Type" class="pickList" data-rowid="@rowId">
                                <option value="0" @Html.Raw((pick != null && (int)pick.Type == 0) ? "selected='selected'" : string.Empty)>Straight Up</option>
                                <option value="1" @Html.Raw((pick != null && (int)pick.Type == 1) ? "selected='selected'" : string.Empty)>Against The Spread</option>
                                <option value="2" @Html.Raw((pick != null && (int)pick.Type == 2) ? "selected='selected'" : string.Empty)>Against The Spread - Over/Under</option>
                            </select>
                        </td>
                        <td>
                            <span><input type="checkbox" class="ouCheck" name="[@(rowId)].HasOverUnder" @Html.Raw((pick != null && pick.HasOverUnder) ? "checked='checked'" : string.Empty)) data-rowid="@rowId" />Over/Under</span>
                            <select id="overUnderPick@(rowId)" class="ouPick" name="[@(rowId)].OverUnder" @Html.Raw((pick != null && pick.HasOverUnder) ? string.Empty : "disabled='disabled'") data-rowid="@rowId">
                                <option value="0" @Html.Raw((pick != null && (int)pick.OverUnder == 0) ? "selected='selected'" : string.Empty)>Over</option>
                                <option value="1" @Html.Raw((pick != null && (int)pick.OverUnder == 1) ? "selected='selected'" : string.Empty)>Under</option>
                            </select>
                        </td>
                            <td>@if (pick != null)
                                {
                                    @Html.Raw(pick.Points.ToString()) 
                                }
                            </td>
                        </tr>                         
                    }
                }
                else if (Model.GamesHaveStarted)
                {
                    foreach (var pick in Model.Picks)
                    {
                        var game = Model.GameForPick(pick);
                
                        <tr>
                            <td></td>
                            <td>@game.Description</td>
                            <td>@game.Spread</td>
                            <td>@game.OverUnder</td>
                            <td>@pick.Team</td>
                            <td>@pick.Type.ToString()</td>
                            <td>@pick.OverUnder.ToString()</td>
                            <td>@pick.Points</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="9">
                            <h4>Viewing picks not available until after all games have started</h4>
                        </td>
                    </tr> 
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="6"></td>
                    <td colspan="2">             
                    </td>
                </tr>
            </tfoot>
        </table>
        if (Model.ViewingPicksForCurrentUser && Model.GamesHaveStarted == false)
        { 
            <div>
                <input type="reset" class="btn btn-default" value="Reset Picks" />
                <button type="button" class="btn btn-primary" onclick="javascript:postForm(@(Model.PickWeek.Number.ToString()))">Save</button>   
            </div>
        }
        
        <div id='hiddenError' style="display:none">
        
        </div>
 
        <script language="javascript" type="text/javascript">

        $(function () {

            $(".selectedCheckbox").change(function () {
                checkboxEnable(this);
            });

            $(".ouCheck").change(function () {

                var index = $(this).attr('data-rowid');

                if (this.checked = true) {
                    $("#overUnderPick" + index).removeAttr('disabled');
                } else {
                    $("#overUnderPick" + index).attr('disabled', 'disabled');
                }
            });

            checkboxEnable(null);

        });

        function checkboxEnable(checkboxClicked) {
            if ($(".selectedCheckbox:checked").length == 3) {

                $(".selectedCheckbox:not(:checked)").each(function () {
                    $(this).parent().parent().find('*').attr('disabled', 'disabled')
                });
            }
            else {
                $(".selectedCheckbox:not(:checked)").each(function () {
                    $(this).parent().parent().find('*').removeAttr('disabled');
                    var index = $(this).attr('alt');
                    $(".pickList[data-rowid=" + index + "]").val(0);
                });
            }

            if (checkboxClicked != null) {

                var index = $(checkboxClicked).attr('alt');

                if (checkboxClicked.checked) {
                    $("[data-rowid=" + index + "][value='0']").attr("checked", "checked");
                } else {
                    $(".pickList[data-rowid=" + index + "]").val(0);
                }
            }
        }

        function enableAll() {
            $(":disabled").removeAttr("disabled");
        }
    </script>
}
